#!/usr/bin/env bash
# Author: Darren Klein
# Github repo: https://github.com/darrenklein/trash
# Version: 1.0.2

# A safe alternative to rm/rmdir, trash can be called with any number of arguments, for example:
# $ trash index.html scr scripts README.md
# It will rename duplicate file/directories using the macOS convention of inserting/appending the time the duplicate resource was deleted.
# For example, sequentially trashing two "index.html" files via `$ trash PATH/TO/index.html` `$ trash OTHER/PATH/TO/index.html`:
#
# index.html
# index 3:45 PM.html
#
# Trashing multiple items at once produces a behavior that is unique to this script, but I believe is a reasonable expectation;
# duplicate files in the same batch will initially have the time inserted/appended, but on finding additional duplicates in the batch of trashed items,
# a sequential numeric identifier will be added as well. For example, trashing multiple index.html files from different sources via something like `$ trash index.html test_1/index.html test_2/index.html test_3/index.html`:
#
# index.html
# index 3:45 PM.html
# index 3:45 PM.html (1)
# index 3:45 PM.html (2)

#########################################################
# Functions
#########################################################

# Lowercase the names of trashed items and trash content
# Used to compare item names and detect duplicates
make_lowercase() {
    echo "$1" | tr "[:upper:]" "[:lower:]"
}

# Check to see if the target is a directory or a file with no extension.
has_no_extension() {
    [[ -d "$1" || "$1" != *"."* ]] && return 0 || return 1   
}

# In the event that an item with the same name is already in either the trash
# or the current batch of trashed items, construct its custom-formatted name.
handle_name() {
    if has_no_extension "$1"
    then
        echo "${2} ${time}"
    else
        local name="${2%.*}"
        local extension="${2##*.}"
        echo "${name} ${time}.${extension}"
    fi   
}

# Move the target files/directories into the trash.
handle_move() {
    local moved=$( mv -fv "$1" ~/.Trash/"$2" 2>/dev/null )

    if [ $? != 0 ]
    then
        echo "trash: $1: unable to trash item"
    else
        # Push the lowercased, single-quoted item into the array of trashed_items,
        # used when checking for the existence of an identically-named item.
        trashed_items+=("'$3'")
        echo "$moved"
    fi
}

# Use binary search to see if an array contains a value.
contains() {
    local arr=("$@")
    ((last_idx=${#arr[@]} - 1))
    local item=${arr[last_idx]}
    unset arr[last_idx]
    local length="${#arr[@]}"
    local start=0
    local stop="$((length - 1))"
    local middle="$(( ((start + stop) + (2 - 1)) / 2 ))"

    while [[ ${arr[middle]} != $item && start -lt stop ]]
    do
        if [[ $item < ${arr[middle]} ]]
        then
            stop="$((middle - 1))"
        else
            start="$((middle + 1))"
        fi

        middle="$(( ((start + stop) + (2 - 1)) / 2 ))"
    done

    [[ ${arr[middle]} == $item ]] && return 0 || return 1 
}


#########################################################
# Initialization
#########################################################
usage="usage: trash source1 source2 ... sourceN"
time=$(date "+%-I.%M.%S %p") # Format the time like 9.32.16 PM - the "-" trims the leading 0.
trashed_items=() # An empty array to hold items trashed during this execution.
lowercase_trash_content=()

# Loop through the trash, lowercasing every item and wrapping it in single quotes.
# Single quotes allow for item name comparisons where names may contain spaces.
for item in ~/.Trash/*
do
    name=$( basename "$item" )
    lowercase_name=$( make_lowercase "$name" )
    lowercase_trash_content+=("'$lowercase_name'")
done

# https://stackoverflow.com/questions/7442417/how-to-sort-an-array-in-bash
IFS=$'\n'
sorted_trash_content=($(sort <<<"${lowercase_trash_content[*]}"))
unset IFS


#########################################################
# Usage - invoked when no arguments passed
#########################################################
if [ "$#" == "0" ]
then
    echo "$usage"
    exit 1
fi


#########################################################
# Execution
#########################################################
while (( "$#" ))
do
    # If the item is a directory and ends with a forward slash, strip the slash so it'll correctly match an existing directory in the trash.
    source=$( ( [ -d "$1" ] && [ "${1: -1}" == / ] ) && echo "${1%?}" || echo "${1}" )
    name=$( basename "$source" )
    # for comparing file/dir names, use the lowercased name.
    lowercase_name=$( make_lowercase "$name" )

    IFS=$'\n'
    sorted_trashed_items=($(sort <<<"${trashed_items[*]}"))
    unset IFS

    # First, check the array of trashed_items that have already been handled in this transaction.
    # If there's a match, no need to check the trash_content, as we can infer that there's already an item with that name in there.
    # Note that trashed_items will be an array of single-quoted strings, so lowercase_name should also be wrapped for comparison.
    # if contains "${trashed_items[@]}" "'${lowercase_name}'" || contains "${lowercase_trash_content[@]}" "'${lowercase_name}'"
    if contains "${sorted_trashed_items[@]}" "'${lowercase_name}'" || contains "${sorted_trash_content[@]}" "'${lowercase_name}'"
    then
        # Construct the new item's name, which will include the time.
        formatted_name=$( handle_name "$source" "$name" )
        # Lowercase the formatted_name, to check for its presence in the batch of trashed_items.
        lowercase_name=$( make_lowercase "$formatted_name" )
        dup_count=$( grep -o "$lowercase_name" <<< "${trashed_items[*]}" | wc -l | tr -d " " )

        # In the event that duplicate items are found in the current batch of trashed_items, append the count of duplicates.
        if [ "$dup_count" -gt 0 ]
        then
            name="$formatted_name ($dup_count)"
        else
            name="$formatted_name"
        fi
    fi

    handle_move "$source" "$name" "$lowercase_name"

    shift
done
