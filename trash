#!/usr/bin/env bash
# Author: Darren Klein
# Github repo: https://github.com/darrenklein/trash

# A safe alternative to rm/rmdir, trash can be called with any number of arguments, for example:
# $ trash index.html scr scripts README.md
# It will rename duplicate file/directories using the macOS convention of inserting/appending the # time the duplicate resource was deleted.

trash_content=$(ls ~/.Trash); # Put the contents of the trash into an array.
time=$(date "+%-I.%M.%S %p"); # Format the time like 9.32.16 PM - the "-" trims the leading 0.
handle_move() {
    mv -fv "$1" ~/.Trash/"$2";
}

for item in "$@"; do
    # If the item is a directory and ends with a forward slash, strip the slash so it'll correctly match an existing item in the trash.
    item=$(([ -d "$item" ] && [ "${item: -1}" == / ]) && echo "${item%?}" || echo "${item}") 

    # If we've found a matching file/directory name in the trash, we'll append/insert the time.
    # If the target is a directory, simply append the time to the end of the name, i.e. "files 9.32.16 PM"
    # If it is a file, inject the time into the name, before the file extension, i.e. "index 9.32.16 PM.html"
    # Conditional borrowed from https://stackoverflow.com/questions/20129920/check-if-exact-word-exists-in-an-array
    if [ $(echo "$trash_content" | sed "s:.*/::" | grep "^$item\$") ]; then
        # Use the same naming strategy for directories and files with no extension.
        if [[ -d "$item" || "$item" != "." ]]; then
            handle_move "$item" "${item} ${time}";
        else
            name="${item%.*}";
            extension="${item##*.}";
            handle_move "$item" "${name} ${time}.${extension}";
        fi
    else
        handle_move "$item";
    fi
done
